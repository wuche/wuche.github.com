---
layout: post
title: "kelude-issue项目管理总结"
description: "kelude-issue项目管理总结"
tags: [development]
published: true
---
 kelude-issue模块，从去年9月底kick off后，到今年3月份，陆陆续续也走过了6个月左右，有一些心得和大家分享下。

issue模块开发团队，由6位同事组成。

同事A，因为是团队TL，有很多团队的日常工作要做，在缺陷管理项目中主要负责项目的整体架构，和对其他同事的技术支持。

同事B，负责缺陷管理的后台管理模块，因为后台管理基本属于单独的一个模块。完全可以让一个人负责。

其他四位同事负责开发缺陷管理前台的功能。

首先，针对4位同事的技术特点，项目组采用了“横向负责法”。针对项目的架构，每位同事负责一个设计层，比如C同事负责UI和前端开发，D同事负责web层交互，E同事负责业务层的，F同事负责数据层。

<img src="/images/posts/heng.jpg" width="100%"  />

横向负责法的优势有几点：

1.术业有专攻。每位同事只要了解和深入自己负责层次的技术和业务。有时间和精力深入了解负责的东西，比如负责前端的同事，就一心开发前端，优化前端。可以在短时间内掌握前端的开发技术。

2.明确责任，对他人负责。负责数据层的同事，提供给service层同事的接口是要好的，这样促使大家很自觉的编写单元测试用例，对自己编写的代码负责。从项目的角度来说，完善了整体的单元测试用例库，对后期的增加功能，修改功能，提供了良好的保证。

劣势也有几点：

1.进度受限。由于每个同事能力不一样，分层，又存在相互依赖的关系，所以项目的进度上会受到一定的影响。

2.沟通成本。你所需要的东西，是别人提供的。别人不一定明白你想要什么，你也不一定一次说明白，你要什么，沟通成本在团队中增加了许多。

3. 做久了，容易产生疲劳。负责的是某一层的技术，做久了，可能会产生疲劳感，没有技术上的新鲜感。

在项目进行了1个月多后，大家都熟悉了各自负责层的技术。项目组采用了“纵向负责法”，也就是“功能负责法”，某个同事负责一个功能点，从前端写到后端，一条龙。

<img src="/images/posts/zong.jpg" width="100%"/>

纵向负责法也有优势：

1. 扩展技术。因为需要从前端写到后端的技术，所以必须掌握前端开发，web层交互，service的设计，数据层的设计，SQL语句的编写。

2.项目进度快。技术相对好的同事负责业务复杂的功能，啃硬骨头。

当然也会有劣势：

1.只知其一，不知其二。比如写“新增”功能，只了解了新增的业务。在横向负责法中，负责写service层的同事，写了新增，编辑，删除等接口，业务上了解更加全面。

2.沟通少。自己负责写功能点，不要依赖别人，团队中沟通就少了很多，其他同事不清楚你的进度。

在缺陷管理项目中 ，我们团队两种方法都实施了，各有各的优势和劣势。不存在好与坏的概念，只有合适不合适。从我个人的角度来说，我更加喜欢“横向负责法”。原因有几点：

1. 沟通是团队的活力。我喜欢一个有活力的团队，一个充满激情，充满“争执”的团队。沟通的成本，可以在大家的努力下，磨合下慢慢减少。各自为战，缺乏沟通，对团队来说，就缺少了活力。

2.完善的单元测试体系。如果一个接口是写给我自己用，我可能不会写单元测试了，如果是提供给别人用，就完全不一样了。完善的单元测试体系，对项目是非常有好处的。特别是增加功能，修改功能和重构代码的时候。

<img src="/images/posts/team.jpg" width="100%" />
